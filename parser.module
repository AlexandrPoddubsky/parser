<?php

/**
 * Implements hook_menu()
 */
function parser_menu() {
  $items = array();
  
  $items['parser/check'] = array(
    'page callback' => 'parser_check_code',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  
  $items['admin/structure/parser_jobs/results/%parser_job'] = array(
    'title' => 'Parser results',
    'page callback' => 'parser_result_page',
    'page arguments' => array(4),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  
  $items['admin/structure/parser_jobs/rollback/%parser_job'] = array(
    'title' => 'Rollback',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('parser_rollback_form', 4),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implements hook_entity_info()
 */
function parser_entity_info() {
  return array(
    'parser_job' => array(
      'label' => t('Job parsing'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'parser_jobs',
      'entity keys' => array(
        'id' => 'jid',
        'label' => 'title'
      ),
      'admin ui' => array(
        'path' => 'admin/structure/parser_jobs'
      ),
      'uri callback' => 'parser_job_uri',
      'access callback' => 'parser_job_access',
      'module' => 'parser',
      'exportable' => TRUE,
    ),
  );
}

/**
 * Check acces rights
 */
function parser_job_access($op, $entity, $account = NULL, $entity_type = 'parser_job') {
  return user_access('administer site configuration');
}
 
/**
 * Load entity object by id
 */
function parser_job_load($jid) {
  $result = entity_load('parser_job', array($jid));
  return $result ? reset($result) : FALSE;
}

/**
 * Parser job uri callback
 */
function parser_job_uri($job) {
  return array('path' => 'admin/structure/parser_jobs/manage/' . $job->jid);
}

/**
 * Job form
 */
function parser_job_form($form, &$form_state, $job) {
  $check_button = array('#field_prefix' => '<input type="button" value="проверить" class="form-submit check-button" />');
  $fields_code = isset($job->fields_code) ? $job->fields_code : array();
  $entity_types = entity_get_info();
  $fields_info = field_info_fields();
  $formats = filter_formats();
  $weight = 0;
  
  $entity_type_value = isset($job->entity_type) ? $job->entity_type : 'node';
  if (isset($form_state['values']['entity_type'])) {
    $entity_type_value = $form_state['values']['entity_type'];
  }
  
  $bundle_options = _parser_get_bundle_options($entity_types[$entity_type_value]['bundles']);
  $bundle_value = (isset($job->bundle) && isset($bundle_options[$job->bundle])) ? $job->bundle : key($bundle_options);
  if (isset($form_state['values']['bundle']) && isset($bundle_options[$form_state['values']['bundle']])) {
    $bundle_value = $form_state['values']['bundle'];
  }
  
  $entity_keys = $entity_types[$entity_type_value]['entity keys'];
  $bundle_key = $entity_keys['bundle'];
  $label_key = isset($entity_keys['label']) ? $entity_keys['label'] : '';
  
  list($entity_properties, $entity_properties_fields) = _parser_get_entity_properties($entity_type_value, $bundle_value);
  if ($entity_type_value == 'taxonomy_term') {
    unset($entity_properties['vocabulary']);
  }
  if (isset($entity_properties[$bundle_key])) {
    unset($entity_properties[$bundle_key]);
  }
  
  $fields_instances = field_info_instances($entity_type_value, $bundle_value);
  
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => 'Название задания',
    '#description' => 'Будет отображаться в списке с заданиями. Пример заполнения: <code>Парсинг проектов на drupal.org</code>',
    '#required' => TRUE,
    '#default_value' => isset($job->title) ? $job->title : '',
    '#maxlength' => 255,
  );
  
  $form['start_url'] = array(
    '#type' => 'textfield',
    '#title' => 'Стартовый URL',
    '#description' => 'Адрес, с которого парсер начнёт работу. Пример заполнения: <code>http://drupal.org/project/modules</code>',
    '#required' => TRUE,
    '#default_value' => isset($job->start_url) ? $job->start_url : '',
    '#maxlength' => 255,
  );
  
  $form['test_url'] = array(
    '#type' => 'textfield',
    '#title' => 'URL тестовой страницы',
    '#description' => '
      Адрес любой страницы, попадающей под условие парсинга. Страница будет использоваться для проверки
      работоспособности кода. Пример заполнения: <code>http://drupal.org/project/zen</code>
    ',
    '#required' => TRUE,
    '#default_value' => isset($job->test_url) ? $job->test_url : '',
    '#maxlength' => 255,
  );
  
  $form['depth'] = array(
    '#type' => 'textfield',
    '#title' => 'Глубина',
    '#description' => '
      Глубина, на которую парсер будет ходить по ссылкам. Например 1 означает, что будет распарсен стартовый адрес и
      страницы на которые он ссылается, т.е. парсер пройдёт вглубь на 1 уровень относительно стартовой страницы.
      Укажите 0, если хотите распарсить только стартовый URL.
    ',
    '#required' => TRUE,
    '#default_value' => isset($job->depth) ? $job->depth : '',
    '#size' => 5,
  );
  
  $form['white_list'] = array(
    '#type' => 'textarea',
    '#title' => 'Белый список адресов',
    '#description' => '
      Маски адресов, по которым будет разрешено ходить парсеру. Каждая маска на новой строке. Оставьте пустым, если
      парсеру разрешено ходить по всем найденным ссылкам. Пример заполнения: <code>http://drupal.org/project/*</code>
    ',
    '#default_value' => isset($job->white_list) ? $job->white_list : '',
    '#rows' => 3,
  );

  $form['black_list'] = array(
    '#type' => 'textarea',
    '#title' => 'Чёрный список адресов',
    '#description' => '
      Маски адресов, по которым будет запрещено ходить парсеру. Каждая маска на новой строке. Пример заполнения:
      <code>http://drupal.org/project/uc_*</code>
    ',
    '#default_value' => isset($job->black_list) ? $job->black_list : '',
    '#rows' => 3,
  );
  
  $form['check_code'] = array(
    '#type' => 'textarea',
    '#title' => 'Код проверки для дальнейшего парсинга страницы',
    '#description' => '
      PHP код без тегов &lt;?php и ?&gt;, который должен вернуть TRUE если страницу нужно парсить в ноду.
      Доступные переменные: $page - html код страницы, $doc - объект phpQuery, $page_url - адрес страницы без учёта редиректов.
      Пример заполнения: <code>return ($doc->find(\'.class-name\')->length() > 0);</code>
    ',
    '#default_value' => isset($job->check_code) ? $job->check_code : '',
    '#rows' => 3,
    '#resizable' => FALSE,
  ) + $check_button;
  
  // Entity type
  $form['entity_type'] = array(
    '#type' => 'select',
    '#title' => 'Тип сущности (entity type)',
    '#description' => 'Выберите тип сущности, который будет создавать парсер.',
    '#options' => _parser_get_entity_type_options($entity_types),
    '#default_value' => isset($job->entity_type) ? $job->entity_type : 'node',
    '#required' => TRUE,
    '#ajax' => array('callback' => 'parser_job_form_entity_type_ajax_callback'),
    '#disabled' => isset($job->jid) && db_select('parser_map')->condition('jid', $job->jid)->countQuery()->execute()->fetchField() ? TRUE : FALSE,
  );
  
  // Bundle
  $form['bundle'] = array(
    '#type' => 'select',
    '#title' => 'Подтип сущности (bundle)',
    '#description' => 'Выберите подтип сущности, который будет создавать парсер.',
    '#options' => $bundle_options,
    '#default_value' => isset($job->bundle) ? $job->bundle : key($bundle_options),
    '#required' => TRUE,
    '#prefix' => '<div id="edit-bundle-wrapper">',
    '#suffix' => '</div>',
    '#ajax' => array(
      'callback' => 'parser_job_form_fields_ajax_callback',
      'wrapper' => 'fields-code-wrapper',
    ),
  );
  
  // Remote ID
  $form['remote_id_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => 'Remote ID',
    '#description' => '
      ID сущности на сайте источнике.
      Этот ID будет сохранён в бд (таблица parser_map) и позволит избежать дублей материалов, доступных по нескольким URL.
      Так же, зная этот ID, можно с помощью функции parser_get_entity_id_by_remote_id() получить ID созданной сущности.
      Поле является не обязательным, но крайне рекомендованное к заполнению.
    ',
    '#weight' => -1,
    '#group' => 'vertical_tabs',
  );
  
  $form['remote_id_fieldset']['remote_id_code'] = array(
    '#type' => 'textarea',
    '#title' => 'PHP код',
    '#description' => 'PHP код, который должен вернуть число или строку (не длиннее 255 символов).',
    '#default_value' => isset($job->remote_id_code) ? $job->remote_id_code : '',
    '#rows' => 3,
    '#resizable' => FALSE,
  ) + $check_button;
  
  $form['fields_wrapper'] = array(
    '#prefix' => '<div id="fields-code-wrapper">',
    '#suffix' => '</div>',
    '#type' => 'fieldset',
    '#title' => 'Поля',
    '#description' => '
      <p>Поля заполняются без обёртки кода в &lt;?php и ?&gt;. Во всех полях доступны следующие переменные:</p>
      <p>
        $doc - объект phpQuery для страницы<br />
        $page - html код страницы<br />
        $page_url - адрес страницы без учёта редиректов<br />
        $entity - объект сущности<br />
        $entity_wrapper - entity metadata wrapper<br />
        $doc_element - объект phpQuery для элемента (только если включён режим списка)<br />
        $element_html - html код элемента (только если включён режим списка)<br />
      </p>
      <p>Оставьте textarea пустым, если поле заполнять не нужно.</p>
    ',
  );
  
  $form['fields_wrapper']['vertical_tabs'] = array('#type' => 'vertical_tabs');
  $form['fields_wrapper']['fields_code'] = array('#tree' => TRUE);
    
  // Properties & Fields
  foreach (($entity_properties + $entity_properties_fields) as $property_name => $property_info) {
    if (!empty($property_info['computed']) || !isset($property_info['setter callback'])) {
      continue;
    }
    
    $fieldset_name = $property_name . '_fieldset';
    $field_type = isset($property_info['type']) ? $property_info['type'] : '';
    $this_property_is_field = isset($property_info['field']);
    $this_property_is_multi_value = ($this_property_is_field && $fields_info[$property_name]['cardinality'] != 1);
    
    $form['fields_wrapper']['fields_code'][$fieldset_name] = array(
      '#type' => 'fieldset',
      '#title' => $property_info['label'] . ' (' . $property_name . ')' . (!empty($property_info['required']) ? ' *' : ''),
      '#description' => isset($property_info['description']) ? $property_info['description'] : '',
      '#weight' => (!empty($property_info['required']) || !empty($property_info['field'])) ? $weight : $weight + 100,
      '#group' => 'vertical_tabs',
    );
    
    $description = 'PHP код, который должен вернуть ' . ($this_property_is_multi_value ? 'массив значений' : 'значение') . ' поля';
    // Simle field or property
    if (!isset($property_info['property info'])) {
      $description .= ($field_type ? ' (тип: ' . check_plain($field_type) . ').' : '.');
    }
    // Compound field or property
    else {
      if ($this_property_is_multi_value) {
        $description .= '. Каждое значение должно быть';
      }
      $description .= ' в формате:<br /><br /><code>array(<br />' . _parser_get_field_structure($property_info) . ')</code>';
    }
    
    $form['fields_wrapper']['fields_code'][$fieldset_name][$property_name] = array(
      '#type' => 'textarea',
      '#title' => 'PHP код',
      '#description' => $description,
      '#default_value' => isset($fields_code[$property_name]) ? $fields_code[$property_name] : '',
      '#rows' => 3,
      '#resizable' => FALSE,
      '#required' => !empty($property_info['required']),
    ) + $check_button;
    
    
    $form['fields_wrapper']['fields_code'][$fieldset_name]['techical_info_fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => 'Техническая информация о поле',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    
    if (function_exists('kprint_r')) {
      $techical_info = kprint_r($property_info, TRUE, 'entity_get_property_info()');
      if ($this_property_is_field) {
        $techical_info .= kprint_r($fields_info[$property_name], TRUE, 'field_info_fields()');
        $techical_info .= kprint_r($fields_instances[$property_name], TRUE, 'field_info_instances()');
      }
    }
    else {
      $techical_info = 'Установите модуль <a href="http://drupal.org/project/devel" target="_blank">Devel</a>.';
    }
      
    $form['fields_wrapper']['fields_code'][$fieldset_name]['techical_info_fieldset']['techical_info'] = array(
      '#markup' => $techical_info,
    );
    
    $weight++;
  }
  
  // Advanced settings
  $form += _parser_job_form_advanced_settings($job, $check_button);
  
  $form['actions'] = array(
    '#type' => 'actions',
  );
  
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Сохранить задание',
  );
  
  $form['actions']['submit_and_start'] = array(
    '#type' => 'submit',
    '#value' => 'Сохранить задание и Начать парсинг',
  );
  
  _parser_set_rows($form);
  
  $parser_path = drupal_get_path('module', 'parser');
  $form['#attached']['library'][] = array('system', 'ui.dialog');
  $form['#attached']['library'][] = array('parser', 'codemirror');
  $form['#attached']['css'][] = $parser_path . '/parser.css';
  $form['#attached']['js'][] = $parser_path . '/parser.js';

  return $form;
}

/**
 * Advanced settings sub-form
 */
function _parser_job_form_advanced_settings($job, $check_button) {
  $form['advanced_settings'] = array(
    '#type' => 'fieldset',
    '#title' => 'Дополнительные настройки',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  
  $form['advanced_settings']['parse_limit'] = array(
    '#type' => 'textfield',
    '#title' => 'Ограничить число создаваемых/обновляемых сущностей',
    '#description' => 'Максимальное число сущностей, которое сможет создать/обновить парсер. Применяется в осномном при тестировании задания. Оставьте пустым, если ограничения не нужны.',
    '#default_value' => !empty($job->parse_limit) ? $job->parse_limit : '',
    '#size' => 5,
  );
  
  $form['advanced_settings']['site_charset'] = array(
    '#type' => 'select',
    '#title' => 'Кодировка сайта',
    '#description' => 'Выберите кодировку, которая используется на удалённом сайте. Рекомендуется автоопределение.',
    '#options' => array('auto' => 'Автоопределение', 'UTF-8' => 'UTF-8', 'WINDOWS-1251' => 'WINDOWS-1251'),
    '#default_value' => isset($job->site_charset) ? $job->site_charset : 'auto',
  );
  
  $form['advanced_settings']['charset_fix'] = array(
    '#type' => 'checkbox',
    '#title' => 'Передавать кодировку в конструктор phpQuery',
    '#description' => 'Отметьте, если возникают проблемы с кодировкой. Костыль!',
    '#default_value' => isset($job->charset_fix) ? $job->charset_fix : FALSE,
  );
  
  $form['advanced_settings']['only_this_domen'] = array(
    '#type' => 'checkbox',
    '#title' => 'Парсить только с этого же домена',
    '#description' => 'Отметьте, если хотите чтобы парсер работал только на домене, указанном в поле "Стартовый URL".',
    '#default_value' => isset($job->only_this_domen) ? $job->only_this_domen : TRUE,
  );
  
  $form['advanced_settings']['save_url'] = array(
    '#type' => 'checkbox',
    '#title' => 'Сохранять адреса',
    '#description' => 'Отметьте, если хотите, чтобы у нод были такие же адреса, как на сайте источнике. Не включайте эту опцию если на сайте источнике не используется ЧПУ (т.е. в адресах есть символ "?").',
    '#default_value' => isset($job->save_url) && module_exists('path') ? $job->save_url : 0,
    '#disabled' => !module_exists('path'),
  );
  
  $form['advanced_settings']['no_update'] = array(
    '#type' => 'checkbox',
    '#title' => 'Не обновлять сущности',
    '#description' => 'Отметьте, если не хотите обновлять сущности, созданные в предыдущие запуски этого задания.',
    '#default_value' => isset($job->no_update) ? $job->no_update : 0,
  );
  
  $form['advanced_settings']['force_download'] = array(
    '#type' => 'checkbox',
    '#title' => 'Не использовать кэш',
    '#description' => 'Отметьте, если хотите чтобы парсер скачивал url-ы даже если они есть в кэше.',
    '#default_value' => isset($job->force_download) ? $job->force_download : 0,
  );
  
  $form['advanced_settings']['list_mode'] = array(
    '#type' => 'checkbox',
    '#title' => 'Режим списка',
    '#description' => 'Отметьте, если сущности на сайте источнике не имеют своих страниц, а располагаются в виде списков. Например это могут быть комментарии.',
    '#default_value' => !empty($job->list_mode_code),
  );
  
  $form['advanced_settings']['list_mode_code'] = array(
    '#type' => 'textarea',
    '#title' => 'Элементы списка',
    '#description' => '
      Код, который должен вернуть простой одномерный массив с элементами списка.
      Доступные переменные: $page - html код страницы, $doc - объект phpQuery.
      Пример заполнения:<br />
      <code>
        $elements = array();<br />
        foreach ($doc->find(\'#comments .comment\') as $element) {<br />
        &nbsp;&nbsp;$elements[] = pq($element)->html();<br />
        }<br />
        return $elements;
      </code>
    ',
    '#default_value' => isset($job->list_mode_code) ? $job->list_mode_code : '',
    '#rows' => 3,
    '#resizable' => FALSE,
    '#states' => array(
      'visible' => array(
        'input[name="list_mode"]' => array('checked' => TRUE),
      ),
    ),
  ) + $check_button;
  
  $form['advanced_settings']['prepare_code'] = array(
    '#type' => 'textarea',
    '#title' => 'Пост-обработка сущности',
    '#description' => '
      Код, который будет выполнен перед вызовом entity_save(). Доступные переменные:
        $entity - объект сущности,
        $entity_wrapper - entity metadata wrapper,
        $page - html код страницы,
        $doc - объект phpQuery.
      Пример заполнения: <code>$entity->title = \'new title\';</code>
    ',
    '#default_value' => isset($job->prepare_code) ? $job->prepare_code : '',
    '#rows' => 3,
    '#resizable' => FALSE,
  );
  
  $form['advanced_settings']['headers'] = array(
    '#type' => 'textarea',
    '#title' => 'HTTP заголовки',
    '#description' => 'Заголовки, используемые кравлером.',
    '#default_value' => isset($job->headers) ? $job->headers : 'User-Agent: Opera/9.80 (Windows NT 6.1; U; ru) Presto/2.8.131 Version/11.10' . "\n",
  );
  
  $form['advanced_settings']['clear_watchdog'] = array(
    '#type' => 'checkbox',
    '#title' => 'Очистить системный журнал',
    '#description' => 'Отметьте, если хотите очистить системный журнал (watchdog) перед началом парсинга.',
    '#default_value' => 0,
  );
  
  return $form;
}

/**
 * Ajax callback
 */
function parser_job_form_entity_type_ajax_callback($form, $form_state) {
  return array(
    '#type' => 'ajax',
    '#commands' => array(
      ajax_command_insert('#edit-bundle-wrapper', drupal_render($form['bundle'])),
      ajax_command_insert('#fields-code-wrapper', drupal_render($form['fields_wrapper'])),
    ),
  );
}

/**
 * Ajax callback
 */
function parser_job_form_fields_ajax_callback($form, $form_state) {
  return $form['fields_wrapper'];
}

/**
 * Job form submit callback
 */
function parser_job_form_submit(&$form, &$form_state) {
  $clicked_button = $form_state['clicked_button']['#value'];
  $fields = field_info_fields();
  $fields_code = array();
  
  if (isset($form_state['values']['fields_code'])) {
    foreach ($form_state['values']['fields_code'] as $fieldset) {
      foreach ($fieldset as $field_name => $field_code) {
        $fields_code[$field_name] = $field_code;
      }
    }
    $fields_code = array_diff($fields_code, array(''));
  }
  $form_state['values']['fields_code'] = $fields_code;
  
  if (!$form_state['values']['parse_limit']) {
    $form_state['values']['parse_limit'] = 0;
  }
  
  $job = entity_ui_form_submit_build_entity($form, $form_state);
  $job->save();

  // Save
  if ($form_state['clicked_button']['#value'] == $form_state['values']['submit']) {
    drupal_set_message('Задание сохранено.');
    $form_state['redirect'] = 'admin/structure/parser_jobs/manage/' . $job->jid;
  }
  // Save and Run
  else {
    parser_run_batch($job, request_path() == 'admin/structure/parser_jobs/add');
  }
}

/**
 * Init batch
 */
function parser_run_batch($job, $redirect = FALSE) {
  if (is_numeric($job)) {
    $job = parser_job_load($job);
  }
  
  _parser_url_delete_all();
  _parser_url_add($job->start_url);

  if (!empty($job->clear_watchdog)) {
    db_delete('watchdog')->execute();
  }
  
  batch_set(array(
    'title' => 'Парсинг',
    'progress_message' => '',
    'operations' => array(
      array('parser_parse', array($job, $redirect)),
    ),
    'finished' => 'parser_finished',
  ));
}

/**
 * Parse page
 */
function parser_parse($job, $redirect, &$context) {
  if (empty($context['sandbox'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['entity_ids'] = array();
    $context['sandbox']['created_entities'] = 0;
    $context['sandbox']['element'] = NULL;
    
    $context['results']['jid'] = $job->jid;
    $context['results']['time_start'] = time();
    $context['results']['created_entities'] = 0;
    $context['results']['updated_entities'] = 0;
    $context['results']['files_from_http'] = 0;
    $context['results']['files_from_http_error'] = 0;
    $context['results']['files_from_cache'] = 0;
    $context['results']['redirect'] = $redirect;
    $context['results']['messages_count'] = _parser_get_watchdog_rows_count();
  }
  
  $url = _parser_url_get_not_parsed();
  $page_url = $url->url;
  $page_url_parsed = parse_url($page_url);
  $page = _parser_get_page_by_url($page_url, $job->headers, $job->site_charset, $job->force_download, $context['results']);
  $doc = _parser_create_phpquery($page, $job->charset_fix);
  $base = $doc->find('base')->attr('href');
  $base_url = $base ? $base : $page_url;
  
  $elements = NULL;
  if ($job->list_mode_code) {
    $elements = eval($job->list_mode_code);
    if ($elements) {
      $context['sandbox']['element'] = ($context['sandbox']['element'] === NULL) ? 0 : $context['sandbox']['element'] + 1;
      $element_html = $elements[$context['sandbox']['element']];
      $doc_element = _parser_create_phpquery($element_html, $job->charset_fix);
    }
  }
  
  $entity_id = parser_get_entity_id_by_url($page_url, $job->jid, $context['sandbox']['element']);
  $entity_type_info = entity_get_info($job->entity_type);
  $remote_id = '';
  
  if ($url->depth < $job->depth) {
    // Find links
    foreach (_parser_get_page_links($doc) as $href) {
      $href_full = parser_get_absolute_url($base_url, $href);
      
      if ($job->white_list && !drupal_match_path($href_full, $job->white_list)) {
        continue;
      }
      if ($job->black_list && drupal_match_path($href_full, $job->black_list)) {
        continue;
      }
      if ($job->only_this_domen && !_parser_check_urls_host($page_url, $href_full)) {
        continue;
      }

      _parser_url_add($href_full, $url->depth + 1, $page_url, $href);
    }
  }

  // Decide - parse cur page or not
  $allowed_parse = TRUE;
  if (!$page) {
    $allowed_parse = FALSE;
  }
  if ($allowed_parse && $job->parse_limit && $context['sandbox']['created_entities'] >= $job->parse_limit) {
    $allowed_parse = FALSE;
  }
  if ($allowed_parse && $job->check_code) {
    $allowed_parse = eval($job->check_code);
  }
  if ($allowed_parse && $job->remote_id_code) {
    $remote_id = eval($job->remote_id_code);
    if ($remote_id) {
      $entity_id = parser_get_entity_id_by_remote_id($remote_id, $job->jid);
    }
  }
  if ($allowed_parse && $entity_id && in_array($entity_id, $context['sandbox']['entity_ids'])) {
    $allowed_parse = FALSE;
  }
  if ($allowed_parse && $job->no_update && $entity_id) {
    $allowed_parse = FALSE;
  }
  
  // Parse page
  if ($allowed_parse) {
    module_load_include('inc', 'parser', 'parser_prepare_field');
    module_load_include('inc', 'parser', 'parser_prepare_entity');
    
    $fields_info = field_info_fields();
    $fields_instances = field_info_instances($job->entity_type, $job->bundle);
    list($entity_properties, $entity_properties_fields) = _parser_get_entity_properties($job->entity_type, $job->bundle);
    
    // Load entity
    if ($entity_id) {
      $entity = current(entity_load($job->entity_type, array($entity_id)));
      $context['results']['updated_entities']++;
    }
    // Create entity object
    if (!$entity_id || !$entity) {
      $entity = entity_create($job->entity_type, array($entity_type_info['entity keys']['bundle'] => $job->bundle));
      $context['results']['created_entities']++;
    }
    
    $entity_wrapper = entity_metadata_wrapper($job->entity_type, $entity);
    
    // Populate properties and fields
    foreach ($job->fields_code as $property_name => $php_code) {
      if (!$php_code) {
        continue;
      }
      
      $result = eval($php_code);
      $property_is_field = isset($entity_properties_fields[$property_name]);
      $property_info = $property_is_field ? $entity_properties_fields[$property_name] : $entity_properties[$property_name];
      $property_is_compound = isset($property_info['property info']);
      $field_info = $property_is_field ? $fields_info[$property_name] : NULL;
      $field_is_multi_value = ($property_is_field && $field_info['cardinality'] != 1);
      
      // Prepare fields
      if ($property_is_field && $result) {
        $function = '_parser_prepare_field_' . $field_info['type'];
        if (function_exists($function)) {
          if ($field_is_multi_value) {
            foreach (array_keys($result) as $key) {
              $function($result[$key], $field_info, $fields_instances[$property_name], $entity, $job, $base_url, $context['results']);
            }
          }
          else {
            $function($result, $field_info, $fields_instances[$property_name], $entity, $job, $base_url, $context['results']);
          }
        }
      }
      
      _parser_set_property($entity_wrapper, $property_name, $result, $property_is_compound, $field_is_multi_value);
    }
    
    // Set Path alias
    if ($job->save_url) {
      $alias = trim($page_url_parsed['path'], '/');
      $alias = str_replace('%20', ' ', $alias);
      if (!path_load(array('alias' => $alias))) {
        $entity->path = array(
          'alias' => $alias,
          'language' => LANGUAGE_NONE,
          'pathauto' => 0,
        );
      }
    }
    
    // Prepare entity
    $function = '_parser_prepare_entity_' . $job->entity_type;
    if (function_exists($function)) {
      $function($entity, $entity_wrapper);
    }
    if ($job->prepare_code) {
      eval($job->prepare_code);
    }
    
    // Save entity
    try {
      $entity_wrapper->save();
    }
    catch (Exception $e) {
      _parser_watchdog('Ошибка при сохранении сущности: ' . $e->getMessage() . '. <b>Адрес:</b> ' . check_plain($page_url), $entity, WATCHDOG_ERROR);
    }
    
    if ($entity_id = $entity_wrapper->getIdentifier()) {
      _parser_map_save(array(
        'entity_id' => $entity_id,
        'jid' => $job->jid,
        'url' => $page_url,
        'remote_id' => $remote_id,
        'element' => $context['sandbox']['element'],
      ));
      
      $context['sandbox']['entity_ids'][] = $entity_id;
      $context['sandbox']['created_entities']++;
    }
  }
  
  if (!$elements || $context['sandbox']['element'] >= count($elements) - 1) {
    _parser_url_mark_parsed($page_url, $context['sandbox']['element']);
    $context['sandbox']['progress']++;
    $context['sandbox']['element'] = NULL;
  }

  $context['sandbox']['max'] = _parser_url_count();
  $context['message'] = '
    Завершён парсинг страницы глубиной ' . $url->depth . ' <em>' . $page_url . '</em><br />
    Обработано страниц: ' . $context['sandbox']['progress'] . '<br />
    Страниц в очереди: ' . ($context['sandbox']['max'] - $context['sandbox']['progress']) . '<br />
    Создано сущностей: ' . $context['results']['created_entities'] . '<br />
    Обновлено сущностей: ' . $context['results']['updated_entities'] . '<br />
    Скачано <abbr title="Страниц и файлов">url</abbr>: ' . $context['results']['files_from_http'] . '<br />
    Не удалось скачать url: ' . $context['results']['files_from_http_error'] . '<br />
    URL взято из кэша: ' . $context['results']['files_from_cache'] . '<br />
    Затраченное время: ' . gmdate('H:i:s', time() - $context['results']['time_start']) . '
  ';

  if ($job->parse_limit && $context['sandbox']['created_entities'] >= $job->parse_limit) {
    $context['finished'] = 1;
  }
  elseif ($context['sandbox']['progress'] <= $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Site is parsed
 */
function parser_finished($success, $results, $operations) {
  drupal_set_message('
    ' . ($success ? 'Парсинг завершён' : 'Парсинг завершён с ошибками') . '.<br />
    Обработано страниц: ' . _parser_url_count(TRUE) . '<br />
    Скачано URL: ' . $results['files_from_http'] . '<br />
    URL взято из кэша: ' . $results['files_from_cache'] . '<br />
    Не удалось скачать URL: ' . $results['files_from_http_error'] . '<br />
    Создано сущностей: ' . l($results['created_entities'], 'admin/structure/parser_jobs/results/' . $results['jid']) . '<br />
    Обновлено сущностей: ' . l($results['updated_entities'], 'admin/structure/parser_jobs/results/' . $results['jid']) . '<br />
    Затрачено времени: ' . gmdate('H:i:s', time() - $results['time_start']) . '<br />
    Новых сообщений в системном журнале: ' . l(_parser_get_watchdog_rows_count() - $results['messages_count'], 'admin/reports/dblog') . '<br />
  ');
  if ($results['redirect']) {
    drupal_goto('admin/structure/parser_jobs/manage/' . $results['jid']);
  }
}

/**
 * Implements of hook_entity_delete().
 * Delete record from {parser_map} table
 */
function parser_entity_delete($entity, $entity_type) {
  $entity_id = entity_id($entity_type, $entity);
    
  $query = db_select('parser_map', 'pm');
  $query->fields('pm', array('jid'));
  $query->innerJoin('parser_jobs', 'pj', 'pj.jid = pm.jid');
  $query->condition('pj.entity_type', $entity_type);
  $query->condition('pm.entity_id', $entity_id);
  $jid = $query->execute()->fetchField();
    
  db_delete('parser_map')
    ->condition('jid', $jid)
    ->condition('entity_id', $entity_id)
    ->execute();
}

/**
 * Implements of hook_entity_view().
 * Show link to original page. Only for admin.
 */
function parser_entity_view($entity, $entity_type, $view_mode, $langcode) {
  $entity_id = entity_id($entity_type, $entity);
  
  if ($view_mode == 'full' && $GLOBALS['user']->uid == 1 && ($url = _parser_get_url_by_entity_id($entity_id))) {
    $entity->content['parser_url'] = array(
      '#markup' => '<p>Контент спарсен со страницы ' . l($url, 'http://anonym.to/?' . $url, array('attributes' => array('target' => '_blank'))) . '</p>', 
      '#weight' => 100, 
    );
  }
}

/**
 * Menu callback. Check php code.
 */
function parser_check_code() {
  $params = array('test_url', 'site_charset', 'charset_fix', 'field_name', 'field_value', 'list_mode_code', 'headers');
  foreach ($params as $param) {
    if (!isset($_POST[$param])) {
      echo 'bad params';
      return NULL;
    }
  }
  
  $page = _parser_get_page_by_url($_POST['test_url'], $_POST['headers'], $_POST['site_charset']);
  $page_url = $_POST['test_url'];
  $doc = _parser_create_phpquery($page, $_POST['charset_fix']);
  
  if ($_POST['list_mode_code']) {
    $elements = eval($_POST['list_mode_code']);
    $element_html = current($elements);
    $doc_element = _parser_create_phpquery($element_html, $_POST['charset_fix']);
  }
  
  $result = eval($_POST['field_value']);
  
  echo print_r($result, TRUE);
}

/**
 * Result page
 */
function parser_result_page($job) {
  $entity_info = entity_get_info($job->entity_type);
  $label_key = $entity_info['entity keys']['label'];
  
  $query = db_select('parser_map', 'pm');
  $query->fields('pm', array('entity_id', 'url', 'remote_id'));
  $query->fields('e', array($label_key));
  $query->innerJoin($entity_info['base table'], 'e', 'e.' . $entity_info['entity keys']['id'] . ' = pm.entity_id');
  $query->condition('jid', $job->jid);
  
  $rows = array();
  foreach ($query->execute() as $i => $row) {
    $entity = current(entity_load($job->entity_type, array($row->entity_id)));
    $uri = entity_uri($job->entity_type, $entity);
    
    $rows[] = array(
      $i + 1,
      $row->entity_id,
      $row->remote_id,
      l($row->{$label_key}, $uri['path'], $uri['options']),
      l($row->url, $row->url),
    );
  }
  
  return array(
    '#theme' => 'table',
    '#header' => array('№', $entity_info['entity keys']['id'], 'Remote ID', $label_key, 'URL'),
    '#rows' => $rows,
    '#empty' => 'Пусто...',
  );
}

/**
 * Rollback form
 */
function parser_rollback_form($form, $form_state, $job) {
  $form['jid'] = array(
    '#type' => 'value',
    '#value' => $job->jid,
  );
 
  return confirm_form(
    $form,
    'Вы действительно хотите удалить все созданные парсером сущности?',
    'admin/structure/parser_jobs',
    'Эта операция необратима.',
    'Удалить',
    'Отменить'
  );
}

/**
 * Rollback form submit callback
 */
function parser_rollback_form_submit($form, &$form_state) {
  $job = parser_job_load($form_state['values']['jid']);
  $deleted_count = 0;
  
  $query = db_select('parser_map', 'pm');
  $query->fields('pm', array('entity_id'));
  $query->condition('jid', $job->jid);
  $result = $query->execute();
  
  foreach ($result as $row) {
    entity_delete($job->entity_type, $row->entity_id);
  }
  
  drupal_set_message('Удалено ' . $result->rowCount() . ' сущностей.');
  
  $form_state['redirect'] = 'admin/structure/parser_jobs';
}

/**
 * Implements of hook_form_FORM_ID_alter()
 */
function parser_form_parser_job_overview_form_alter(&$form, $form_state) {
  $form['table']['#header'][2]['colspan'] = 6;
  
  foreach ($form['table']['#rows'] as &$row) {
    $row[] = l(t('results'), 'admin/structure/parser_jobs/results/' . $row[0]['data']['#name']);
    $row[] = l(t('rollback'), 'admin/structure/parser_jobs/rollback/' . $row[0]['data']['#name']);
  }
}

/**
 * Implements of hook_library().
 */
function parser_library() {
  $parser_path = drupal_get_path('module', 'parser');
    
  $libraries['codemirror'] = array(
    'title' => 'CodeMirror',
    'website' => 'http://codemirror.net/',
    'version' => '2.13',
    'js' => array(
      $parser_path . '/codemirror2/lib/codemirror.js' => array(),
      $parser_path . '/codemirror2/mode/clike/clike.js' => array(),
      $parser_path . '/codemirror2/mode/php/php.js' => array(),
    ),
    'css' => array(
      $parser_path . '/codemirror2/lib/codemirror.css' => array(),
      $parser_path . '/codemirror2/theme/default.css' => array(),
    ),
  );

  return $libraries;
}

/**
 * Return entity id by URL
 */
function parser_get_entity_id_by_url($url, $jid = NULL, $element = NULL) {
  $query = db_select('parser_map', 'pn')
    ->fields('pn', array('entity_id'))
    ->condition('url', $url)
    ->range(0, 1);
    
  if ($jid) {
    $query->condition('jid', $jid);
  }
  
  if ($element === NULL) {
    $query->isNull('element');
  }
  else {
    $query->condition('element', $element);
  }
  
  return $query->execute()->fetchField();
}

/**
 * Return entity id by Page Key
 */
function parser_get_entity_id_by_remote_id($remote_id, $jid = NULL) {
  $query = db_select('parser_map', 'pn')
    ->fields('pn', array('entity_id'))
    ->condition('remote_id', $remote_id)
    ->range(0, 1);

  if ($jid) {
    $query->condition('jid', $jid);
  }
  
  return $query->execute()->fetchField();
}

/**
 * Implements hook_entity_property_info_alter()
 */
function parser_entity_property_info_alter(&$info) {
  foreach ($info as $entity_type => $properties) {
    if (isset($properties['bundles'])) {
      foreach ($properties['bundles'] as $bundle => $bundle_properties) {
        foreach ($bundle_properties['properties'] as $property_name => $property_info) {
          _parser_set_format_setter_callback($info[$entity_type]['bundles'][$bundle]['properties'][$property_name]);
        }
      }
    }
    
    if (isset($properties['properties'])) {
      foreach ($properties['properties'] as $property_name => $property_info) {
        _parser_set_format_setter_callback($info[$entity_type]['properties'][$property_name]);
      }
    }
  }
}

/**
 * Find images in html, download and change href
 */
function parser_download_images($html, $base_url, $path = 'public://images', &$stat = NULL) {
  $doc = _parser_create_phpquery($html);
  
  foreach ($doc->find('img') as $img) {
    $image_url = parser_get_absolute_url($base_url, pq($img)->attr('src'));
    $image_url_parsed = parse_url($image_url);
    $local_image_name = ltrim($image_url_parsed['path'], '/');
    $local_image_name = str_replace('/', '-', $local_image_name);
    
    if (!file_exists($path . '/' . $local_image_name)) {
      // Download image to cache
      $cache_file_uri = _parser_download_url_to_cache($image_url, array(), FALSE, $stat);
      if (!$cache_file_uri) {
        continue;
      }
      
      // Copy image from cache
      $file = _parser_copy_file($cache_file_uri, $path . '/' . $local_image_name);
      if ($file) {
        $file->status = FILE_STATUS_PERMANENT;
        file_save($file);
      }
    }
    
    $new_src = file_create_url($path . '/' . $local_image_name);
    $new_src = drupal_substr($new_src, drupal_strlen($GLOBALS['base_root']));
    pq($img)->attr('src', $new_src);
  }
  
  return $doc->html();
}

/**
 * Set setter callback for 'format' property
 */
function _parser_set_format_setter_callback(&$property_info) {
  if (
    isset($property_info['type']) &&
    ($property_info['type'] == 'text_formatted' || $property_info['type'] == 'list<text_formatted>') &&
    isset($property_info['property info']['format']) && 
    !isset($property_info['property info']['format']['setter callback'])
  ) {
    $property_info['property info']['format']['setter callback'] = 'entity_property_verbatim_set';
  }
}

/**
 * Get URL info
 */
function _parser_url_get($url) {
  return db_select('parser_urls', 'pu')
    ->fields('pu')
    ->condition('url', $url)
    ->execute()
    ->fetchObject();
}

/**
 * Get first not parsed URL info
 */
function _parser_url_get_not_parsed() {
  return db_select('parser_urls', 'pu')
    ->fields('pu')
    ->condition('parsed', 0)
    ->range(0, 1)
    ->execute()
    ->fetchObject();
}

/**
 * Adding URL to database
 */
function _parser_url_add($url, $depth = 0, $page_url = '', $href = '') {
  if (!_parser_url_get($url) && strpos($url, 'xandeadx.ru') === FALSE) {
    db_insert('parser_urls')
      ->fields(array(
        'url' => $url,
        'depth' => $depth,
        'page_url' => $page_url,
        'href' => $href,
      ))
      ->execute();
  }
}

/**
 * Mark URL as parsed
 */
function _parser_url_mark_parsed($url) {
  db_update('parser_urls')
    ->fields(array('parsed' => 1))
    ->condition('url', $url)
    ->execute();
}

/**
 * Delete all URLs from database
 */
function _parser_url_delete_all() {
  db_truncate('parser_urls')->execute();
}

/**
 * Get count not parsed URLs
 */
function _parser_url_count($parsed = NULL) {
  $query = db_select('parser_urls', 'pu');
  if ($parsed !== NULL) {
    $query->condition('pu.parsed', $parsed);
  }
  return $query->countQuery()->execute()->fetchField();
}

/**
 * Return page html by URL
 */
function _parser_get_page_by_url($url, $headers = array(), $charset = 'auto', $force_download = FALSE, &$results = NULL) { 
  $page_cache_uri = _parser_download_url_to_cache($url, $headers, $force_download, $results);
  if (!$page_cache_uri) {
    return NULL;
  }
  $page = file_get_contents($page_cache_uri);
  
  // Convert charset
  if ($charset == 'auto') {
    if (preg_match('# content="text/html; charset=(.+)"#isU', $page, $matches) && drupal_strtolower($matches[1]) != 'utf-8') {
      $page = iconv($matches[1], 'UTF-8//IGNORE', $page);
      $page = str_ireplace(
        ' content="text/html; charset=' . $matches[1] . '"',
        ' content="text/html; charset=utf-8"',
        $page
      );
    }
  }
  else if ($charset != 'UTF-8') {
    $page = iconv($charset, 'UTF-8//IGNORE', $page);
  }
      
  return $page;
}

/**
 * Download remote url to cache and return cache uri
 */
function _parser_download_url_to_cache($url, $headers = array(), $force_download = FALSE, &$stat = NULL) {
  $cache_uri = 'public://parser_cache/' . md5($url);
  
  if (!file_exists($cache_uri) || $force_download) {
    if (is_string($headers)) {
      $headers = _parser_get_headers_array($headers);
    }
    $request_options = array('headers' => $headers);
    $result = drupal_http_request($url, $request_options);
    if ($result->code == 303 && !empty($result->headers['location'])) {
      $result = drupal_http_request($result->headers['location'], $request_options);
    }
    
    if (!empty($result->error)) {
      _parser_watchdog('Ошибка при закачке ' . check_plain($url) . ': ' . check_plain($result->error) . (isset($result->data) ? ', <b>Результат</b>: ' . check_plain(drupal_substr($result->data, 0, 1000)) : ''), NULL, WATCHDOG_ERROR);
      if ($stat) {
        $stat['files_from_http_error']++;
      }
      return NULL;
    }
    if (!$result->data) {
      _parser_watchdog('Ошибка при закачке ' . check_plain($url) . ': сервер не возвратил данных.', NULL, WATCHDOG_ERROR);
      if ($stat) {
        $stat['files_from_http_error']++;
      }
      return NULL;
    }
    
    file_unmanaged_save_data($result->data, $cache_uri, FILE_EXISTS_REPLACE);
    if ($stat) {
      $stat['files_from_http']++;
    }
  }
  else {
    if ($stat) {
      $stat['files_from_cache']++;
    }
  }
  
  return $cache_uri;
}

/**
 * Add row in {parser_map} table
 */
function _parser_map_save($record) {
  db_merge('parser_map')
    ->key(array('entity_id' => $record['entity_id']))
    ->fields(array(
      'jid' => $record['jid'],
      'url' => $record['url'],
      'element' => $record['element'],
      'remote_id' => $record['remote_id'],
    ))
    ->execute();
}

/**
 * Return URL by entity id
 */
function _parser_get_url_by_entity_id($entity_id, $jid = NULL) {
  $query = db_select('parser_map', 'pn')
    ->fields('pn', array('url'))
    ->condition('entity_id', $entity_id);
    
  if ($jid) {
    $query->condition('jid', $jid);
  }
  
  return $query->execute()->fetchField();
}

/**
 * Return row count
 */
function _parser_get_rows($text) {
  $count = substr_count(trim($text), "\n") + 1;
  return $count > 3 ? $count : 3;
}

/**
 * Set row count
 */
function _parser_set_rows(&$form) {
  foreach (element_children($form) as $element) {
    if (isset($form[$element]['#type']) && $form[$element]['#type'] == 'textarea') {
      $form[$element]['#rows'] = _parser_get_rows($form[$element]['#default_value']);
    }
    else {
      _parser_set_rows($form[$element]);
    }
  }
}

/**
 * Return absolute url by base and relative url (deprecated)
 */
function _parser_get_full_url($relative_url, $base_url) {
  $relative_url = trim($relative_url);
  $relative_url = preg_replace('/#.*/', '', $relative_url);
  $relative_url_parsed = parse_url($base_url);
  if (!isset($relative_url_parsed['path'])) {
    $relative_url_parsed['path'] = '/';
  }

  // example: //wikimedia.org/dir/image.png
  if (drupal_substr($relative_url, 0, 2) == '//') {
    $relative_url = $relative_url_parsed['scheme'] . ':' . $relative_url;
  }
  // example: /dir/image.png
  elseif (drupal_substr($relative_url, 0, 1) == '/') {
    $relative_url = $relative_url_parsed['scheme'] . '://' . $relative_url_parsed['host'] . $relative_url;
  }
  // example: dir/image.png
  elseif (!preg_match('#^[a-z]+://#', $relative_url)) {
    $path = preg_replace('#/[^/]+$#', '', $relative_url_parsed['path']);
    $path = trim($path, '/');
    if ($path) {
      $path .= '/';
    }
    $relative_url = $relative_url_parsed['scheme'] . '://' . $relative_url_parsed['host'] . '/' . $path . $relative_url;
  }
  
  $relative_url = str_replace(' ', '+', $relative_url);
  
  return $relative_url;
}

/**
 * Return absolute url by base and relative url
 */
function parser_get_absolute_url($base_url, $relative_url) {
  if (!function_exists('url_to_absolute')) {
    require_once('AbsoluteUrl/url_to_absolute.php');
  }
  
  if (preg_match('#^[a-z]+://[^/]+$#', $base_url)) {
    $base_url .= '/';
  }
  
  return url_to_absolute($base_url, $relative_url);
}

/**
 * Create phpQuery object
 */
function _parser_create_phpquery($html, $charset_fix = FALSE) {
  require_once('phpQuery/phpQuery/phpQuery.php');
  return phpQuery::newDocumentHTML($html, $charset_fix ? 'utf8' : NULL);
}

/**
 * Return example field structure
 */
function _parser_get_field_structure($field_info, $spaces = 2) {
  $strucure = '';
  foreach ($field_info['property info'] as $property_name => $property_info) {
    if (!isset($property_info['setter callback'])) {
      continue;
    }
    $strucure .= _parcer_spaces($spaces) . "'$property_name' => \${$property_name}, // " . $property_info['label'] . ' (' . $property_info['type'] . ', ' . (isset($property_info['required']) ? 'required' : 'optional') . ')<br />';
  }
  return $strucure;
}

/**
 * Return spaces
 */
function _parcer_spaces($count) {
  return str_repeat('&nbsp;', $count);
}

/**
 * Set entity property
 */
function _parser_set_property($entity_wrapper, $property_name, $property_value, $property_is_compound, $property_is_multi_value) {
  // Multi-value compound property
  if ($property_is_multi_value && $property_is_compound && $property_value) {
    foreach ($property_value as $delta => $property_item) {
      foreach ($property_item as $sub_property_name => $sub_property_value) {
        try {
          $entity_wrapper->{$property_name}[$delta]->{$sub_property_name} = $sub_property_value;
        }
        catch (Exception $e) {
          _parser_watchdog('Ошибка при записи в $entity_wrapper->' . $property_name . '[\'' . $delta . '\']->' . $sub_property_name . ': ' . $e->getMessage(), $sub_property_value, WATCHDOG_ERROR);
        }
      }
    }
  }
  // Single-value compound property
  else if (!$property_is_multi_value && $property_is_compound && $property_value) {
    foreach ($property_value as $sub_property_name => $sub_property_value) {
      try {
        $entity_wrapper->{$property_name}->{$sub_property_name} = $sub_property_value;
      }
      catch (Exception $e) {
        _parser_watchdog('Ошибка при записи в $entity_wrapper->' . $property_name . '->' . $sub_property_name . ': ' . $e->getMessage(), $sub_property_value, WATCHDOG_ERROR);
      }
    }
  }
  // Multi-value simple property
  else if ($property_is_multi_value && !$property_is_compound && $property_value) {
    foreach ($property_value as $delta => $property_item) {
      try {
        $entity_wrapper->{$property_name}[$delta] = $property_item;
      }
      catch (Exception $e) {
        _parser_watchdog('Ошибка при записи в $entity_wrapper->' . $property_name . '[\'' . $delta . '\']: ' . $e->getMessage(), $property_item, WATCHDOG_ERROR);
      }
    }
  }
  // Single-value simple property
  else if (!$property_is_multi_value && !$property_is_compound) {
    try {
      $entity_wrapper->{$property_name} = $property_value;
    }
    catch (Exception $e) {
      _parser_watchdog('Ошибка при записи в $entity_wrapper->' . $property_name . ': ' . $e->getMessage(), $property_value, WATCHDOG_ERROR);
    }
  }
}

/**
 * Add error to watchdog
 */
function _parser_watchdog($text, $object = NULL, $severity = WATCHDOG_NOTICE) {
  if ($object !== NULL) {
    watchdog('parser', $text . '<br />Value:<pre>' . check_plain(print_r($object, TRUE)) . '</pre>', NULL, $severity);
  }
  else {
    watchdog('parser', $text, NULL, $severity);
  }
}

/**
 * Return entity type properties
 */
function _parser_get_entity_properties($entity_type, $bundle) {
  $entity_properties_and_fields = entity_get_property_info($entity_type);
  $entity_properties = $entity_properties_and_fields['properties'];
  $entity_properties_fields = isset($entity_properties_and_fields['bundles'])
    ? $entity_properties_and_fields['bundles'][$bundle]['properties']
    : array();
  return array($entity_properties, $entity_properties_fields);
}

/**
 * Copy file from cache and return file object
 */
function _parser_copy_file($from_uri, $to_uri) {
  $file = (object)array(
    'uid' => $GLOBALS['user']->uid,
    'uri' => $from_uri,
    'filename' => drupal_basename($to_uri),
    'filemime' => file_get_mimetype($from_uri),
  );
  $file_path = file_stream_wrapper_uri_normalize($to_uri);
  $file = file_copy($file, $file_path);
  if (!$file) {
    _parser_watchdog('Ошибка при копировании файла <i>' . $file->uri  . '</i> в <i>' . $file_path . '</i>.', NULL, WATCHDOG_ERROR);
  }
  
  return $file;
}

/**
 * Return page links
 */
function _parser_get_page_links($doc) {
  $links = array();  
  foreach ($doc->find('a') as $a) {
    $href = pq($a)->attr('href');
    
    if (!$href) {
      continue;
    }
    if (drupal_substr($href, 0, 1) == '#') {
      continue;
    }
    if (preg_match('#^([a-z]+)://#', $href, $matches) && !in_array($matches[1], array('http', 'https'))) {
      continue;
    }
    if (strpos($href, 'javascript:') === 0 || strpos($href, 'mailto:') === 0) {
      continue;
    }
    
    $links[] = $href;
  }
  
  return $links;
}

/**
 * Return TRUE if URLs have same host
 */
function _parser_check_urls_host($url1, $url2) {
  $url1_host = preg_replace('#^www.#', '', parse_url($url1, PHP_URL_HOST));
  $url2_host = preg_replace('#^www.#', '', parse_url($url2, PHP_URL_HOST));
  if ($url1_host == $url2_host) {
    return TRUE;
  }
}

/**
 * Return options for form element
 */
function _parser_get_entity_type_options($entity_types) {
  $options = array();
  foreach ($entity_types as $entity_type => $entity_info) {
    $options[$entity_type] = $entity_info['label'];
  }
  return $options;
}

/**
 * Return options for form element
 */
function _parser_get_bundle_options($bundles) {
  $options = array();
  foreach ($bundles as $bundle_name => $bundle_info) {
    $options[$bundle_name] = $bundle_info['label'];
  }
  return $options;
}

/**
 * Return rows count in {watchdog} table
 */
function _parser_get_watchdog_rows_count() {
  return db_select('watchdog')->countQuery()->execute()->fetchField();
}

/**
 * Return options for drupal_http_request()
 */
function _parser_get_headers_array($headers) {
  $headers_array = array();
  foreach (explode("\n", $headers) as $header) {
    $header = trim($header);
    if ($header) {
      list($name, $value) = explode(': ', $header);
      $headers_array[$name] = $value;
    }
  }
  return $headers_array;
}
