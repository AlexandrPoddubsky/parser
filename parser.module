<?php

/**
 * Implements hook_menu()
 */
function parser_menu() {
  $items['parser/check'] = array(
    'page callback' => 'parser_check_code',
    'access arguments' => array('administer node'),
    'type' => MENU_CALLBACK,
  );
  
  $items['admin/structure/parser_jobs/results/%parser_job'] = array(
    'title' => 'Parser results',
    'page callback' => 'parser_result_page',
    'page arguments' => array(4),
    'access arguments' => array('administer node'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implements hook_entity_info()
 */
function parser_entity_info() {
  return array(
    'parser_job' => array(
      'label' => t('Job parsing'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'parser_jobs',
      'entity keys' => array(
        'id' => 'id',
        'label' => 'title'
      ),
      'admin ui' => array(
        'path' => 'admin/structure/parser_jobs'
      ),
      'access callback' => 'parser_job_access',
      'module' => 'parser',
      'exportable' => TRUE,
    ),
  );
}

/**
 * Check acces rights
 */
function parser_job_access($op, $entity, $account = NULL, $entity_type = 'parser_job') {
  return user_access('administer nodes');
}
 
/**
 * Load entity object by id
 */
function parser_job_load($id) {
  $result = entity_load('parser_job', array($id));
  return $result ? reset($result) : FALSE;
}

/**
 * Menu callback
 */
function parser_job_form($form, &$form_state, $job) {
  $check_button = array('#field_prefix' => '<input type="button" value="проверить" class="form-submit check-button" />');
    
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => 'Название задания',
    '#description' => 'Будет отображаться в списке с заданиями. Пример заполнения: <code>Парсинг проектов на drupal.org</code>',
    '#required' => TRUE,
    '#default_value' => isset($job->title) ? $job->title : '',
  );
  
  $form['start_url'] = array(
    '#type' => 'textfield',
    '#title' => 'Стартовый URL',
    '#description' => 'Адрес, с которого парсер начнёт работу. Пример заполнения: <code>http://drupal.org/project/modules</code>',
    '#required' => TRUE,
    '#default_value' => isset($job->start_url) ? $job->start_url : '',
  );
  
  $form['only_this_domen'] = array(
    '#type' => 'checkbox',
    '#title' => 'Парсить только с этого же домена',
    '#description' => 'Отметьте, если хотите чтобы парсер работал только на указанном выше домене.',
    '#default_value' => isset($job->only_this_domen) ? $job->only_this_domen : TRUE,
  );
  
  $form['test_url'] = array(
    '#type' => 'textfield',
    '#title' => 'URL тестовой страницы',
    '#description' => 'Адрес любой страницы, попадающей под условие парсинга, которая будет использоваться для проверки работоспособности кода.',
    '#required' => TRUE,
    '#default_value' => isset($job->test_url) ? $job->test_url : '',
  );
  
  $form['depth'] = array(
    '#type' => 'textfield',
    '#title' => 'Глубина',
    '#description' => 'Глубина, на которую парсер будет ходить по ссылкам. Например 1 означает, что будет распарсен стартовый адрес и страницы на которые он ссылается, т.е. парсер пройдёт вглубь на 1 уровень относительно стартовой страницы.',
    '#required' => TRUE,
    '#default_value' => isset($job->depth) ? $job->depth : 1,
    '#size' => 5,
  );
  
  $form['node_limit'] = array(
    '#type' => 'textfield',
    '#title' => 'Ограничить число нод',
    '#description' => 'Введите максимальное число нод, которое сможет создать парсер. Укажите 0 если ограничения не нужны.',
    '#required' => TRUE,
    '#default_value' => isset($job->node_limit) ? $job->node_limit : 0,
    '#size' => 5,
  );
  
  $form['white_list'] = array(
    '#type' => 'textarea',
    '#title' => 'Белый список адресов',
    '#description' => 'Маски адресов, по которым будет разрешено ходить парсеру. Каждая маска на новой строке. Оставьте пустым, если парсеру разрешено ходить по всем найденным ссылкам. Пример заполнения: <code>http://drupal.org/project/*</code>',
    '#default_value' => isset($job->white_list) ? $job->white_list : '',
    '#rows' => 3,
  );

  $form['black_list'] = array(
    '#type' => 'textarea',
    '#title' => 'Чёрный список адресов',
    '#description' => 'Маски адресов, по которым будет запрещено ходить парсеру. Каждая маска на новой строке. Пример заполнения: <code>http://drupal.org/project/uc_*</code>',
    '#default_value' => isset($job->black_list) ? $job->black_list : '',
    '#rows' => 3,
  );
  
  $form['check_code'] = array(
    '#type' => 'textarea',
    '#title' => 'Код проверки для дальнейшего парсинга страницы',
    '#description' => 'PHP код без тегов &lt;?php и ?&gt;, который должен вернуть TRUE если страницу нужно парсить в ноду. Доступные переменные: $page - html код страницы, $doc - объект phpQuery, $page_url - адрес страницы. Пример заполнения: <code>return (bool)$doc->find(\'.node-product\')->length();</code>',
    '#default_value' => isset($job->check_code) ? $job->check_code : '',
    '#rows' => 3,
    '#resizable' => FALSE,
  ) + $check_button;
  
  $form['site_charset'] = array(
    '#type' => 'select',
    '#title' => 'Кодировка сайта',
    '#description' => 'Выберите кодировку, которая используется на сайте. Рекомендуется автоопределение.',
    '#options' => array('auto' => 'Автоопределение', 'UTF-8' => 'UTF-8', 'WINDOWS-1251' => 'WINDOWS-1251'),
    '#default_value' => isset($job->site_charset) ? $job->site_charset : 'auto',
  );
  
  $node_types = node_type_get_names();
  $form['node_type'] = array(
    '#type' => 'select',
    '#title' => 'Тип материала',
    '#description' => 'Выберите тип материала, который будет создавать парсер.',
    '#options' => $node_types,
    '#default_value' => isset($job->node_type) ? $job->node_type : key($node_types),
    '#required' => TRUE,
    '#ajax' => array(
      'callback' => 'parser_job_form_fields',
      'wrapper' => 'node-fields-code',
    ),
  );
  
  $form['node_language'] = array(
    '#type' => 'select',
    '#title' => 'Язык материала',
    '#description' => 'Язык материала и полей.',
    '#options' => drupal_map_assoc(field_content_languages()),
    '#default_value' => isset($job->node_language) ? $job->node_language : 'und',
  );
  
  $form['save_url'] = array(
    '#type' => 'checkbox',
    '#title' => 'Сохранять адреса',
    '#description' => 'Отметьте, если хотите, чтобы у нод были такие же адреса, как на оригинальном сайте. Не включайте эту опцию если на оригинальном сайте не используется ЧПУ (т.е. в адресах есть символ "?")',
    '#default_value' => isset($job->save_url) && module_exists('path') ? $job->save_url : 0,
    '#disabled' => !module_exists('path'),
  );
  
  $form['no_update_nodes'] = array(
    '#type' => 'checkbox',
    '#title' => 'Не обновлять ноды',
    '#description' => 'Отметьте, если не хотите обновлять ноды, созданные в предыдущие запуски этого задания',
    '#default_value' => isset($job->no_update_nodes) ? $job->no_update_nodes : 0,
  );
  
  $form['fields'] = array(
    '#type' => 'fieldset',
    '#title' => 'Поля',
    '#description' => '
      <p>Поля заполняются без обёртки кода в &lt;?php и ?&gt;. Во всех полях доступны две переменные $page - html код страницы, $doc - объект phpQuery. Оставьте textarea пустым, если поле заполнять не нужно.<p>
      <p>Если появляются проблемы с кодировкой, то попробуйте сменить значение в поле <i>Кодировка сайта</i> или используйте функцию iconv(), для ручной конвертации. Например:<br />
      <code style="font-size:.9em;">return iconv(\'WINDOWS-1251\', \'UTF-8\', $doc->find(\'selector\')->text());</code></p>
    ',
  );
  
  $form['fields']['node_title_code_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => 'title',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  
  $form['fields']['node_title_code_fieldset']['node_title_code'] = array(
    '#type' => 'textarea',
    '#title' => 'title',
    '#description' => 'PHP код, который должен вернуть заголовок ноды. Пример заполнения: <code>return $doc->find(\'h1\')->text();</code>',
    '#default_value' => isset($job->node_title_code) ? $job->node_title_code : '',
    '#required' => TRUE,
    '#rows' => 3,
    '#resizable' => FALSE,
  ) + $check_button;
  
  $form['fields']['node_fields_code'] = array(
    '#prefix' => '<div id="node-fields-code">',
    '#suffix' => '</div>',
    '#tree' => TRUE,
  );
  
  $node_type = $form['node_type']['#default_value'];
  if (isset($form_state['values']['node_type'])) {
    $node_type = $form_state['values']['node_type'];
  }
  $fields = field_info_fields();
  $instances = field_info_instances();
  $node_fields_code = isset($job->node_fields_code) ? $job->node_fields_code : array();
  $formats = filter_formats();
  $format_options = array();
  foreach ($formats as $format) {
    $format_options[$format->format] = $format->name;
  }
  $descriptions = array(
    'default' => 'PHP код, который должен вернуть значение поля.',
    'file' => 'PHP код, который должен вернуть URL файла. Адрес может быть как абсолютный, так и относительный. Все файлы будут закачаны на текущий сервер, в директорию указанную в настройках поля. Пример заполнения: <code>return $doc->find(\'a.download-link\')->attr(\'href\');</code>',
    'image' => 'PHP код, который должен вернуть URL картинки. Адрес может быть как абсолютный, так и относительный. Все картинки будут закачаны на текущий сервер, в директорию указанную в настройках поля. Пример заполнения: <code>return $doc->find(\'.cover img\')->attr(\'src\');</code>',
    'taxonomy_term_reference' => 'PHP код, который должен вернуть название термина, либо массив названий. Отсутствующие термины будут созданы автоматически. Пример заполнения:<br /><code>$terms = array();<br />foreach ($doc->find(\'.tags li\') as $li) $terms[] = pq($li)->text();<br />return $terms;</code>',
    'text_with_summary' => 'PHP код, который должен вернуть значение поля. Пример заполнения: <code>return $doc->find(\'article.content\')->html();</code>',
  );
  
  foreach ($fields as $field_name => $field) {
    if (isset($field['bundles']['node']) && in_array($node_type, $field['bundles']['node'])) {
      $description = isset($descriptions[$field['type']]) ? $descriptions[$field['type']] : $descriptions['default'];
      $description .= !function_exists('_parser_add_field_' . $field['type']) ? ' <span style="color:red;">Тип поля не поддерживается, это значит что код должен вернуть структуру поля. Например: <code>return array(0 => array(\'value\' => $doc->find(\'#some-id\')->text()));</code></span>' : '';
      $fieldset_name = $field_name . '_fieldset';
      
      $form['fields']['node_fields_code'][$fieldset_name] = array(
        '#type' => 'fieldset',
        '#title' => $field_name,
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
  
      $form['fields']['node_fields_code'][$fieldset_name][$field_name] = array(
        '#type' => 'textarea',
        '#title' => 'PHP код',
        '#description' => $description,
        '#default_value' => isset($node_fields_code[$field_name]) ? $node_fields_code[$field_name] : '',
        '#rows' => 3,
        '#resizable' => FALSE,
      ) + $check_button;

      if (!empty($instances['node'][$node_type][$field_name]['settings']['text_processing'])) {
        $form['fields']['node_fields_code'][$fieldset_name][$field_name . '_format'] = array(
          '#type' => 'select',
          '#title' => 'Формат текста',
          '#description' => 'Формат текста, который будет установлен для поля.',
          '#options' => $format_options,
          '#default_value' => isset($node_fields_code[$field_name . '_format']) ? $node_fields_code[$field_name . '_format'] : '',
        );
      }
      
      if ($field['type'] == 'taxonomy_term_reference') {
        $form['fields']['node_fields_code'][$fieldset_name][$field_name . '_clear_voc'] = array(
          '#type' => 'checkbox',
          '#title' => 'Очистить словарь перед парсингом.',
        );
      }
    }
  }
  
  $form['node_prepare_code'] = array(
    '#type' => 'textarea',
    '#title' => 'Пост обработка ноды',
    '#description' => 'Код, который будет выполнен перед вызовом node_save(). Доступные переменные: $node - объект ноды, $page - html код страницы, $doc - объект phpQuery. Пример заполнения: <code>$node->title = \'new title\';</code>',
    '#default_value' => isset($job->node_prepare_code) ? $job->node_prepare_code : '',
    '#rows' => 3,
    '#resizable' => FALSE,
  );
  
  $form['actions'] = array(
    '#type' => 'actions',
  );
  
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Сохранить задание',
  );
  
  $form['actions']['submit_and_start_parsing'] = array(
    '#type' => 'submit',
    '#value' => 'Сохранить задание и Начать парсинг',
  );
  
  $form['actions']['start_parsing'] = array(
    '#type' => 'submit',
    '#value' => 'Начать парсинг',
  );
  
  _parser_set_rows($form);
  
  $parser_path = drupal_get_path('module', 'parser');
  $form['#attached']['library'][] = array('system', 'ui.dialog');
  $form['#attached']['library'][] = array('parser', 'codemirror');
  $form['#attached']['css'][] = $parser_path . '/parser.css';
  $form['#attached']['js'][] = $parser_path . '/parser.js';
  
  return $form;
}

/**
 * Ajax callback
 */
function parser_job_form_fields($form, $form_state) {
  return $form['fields']['node_fields_code'];
}

/**
 * Entity form submit callback
 */
function parser_job_form_submit(&$form, &$form_state) {
  $clicked_button = $form_state['clicked_button']['#value'];
  $values = $form_state['values'];
  $fields = field_info_fields();
  
  $node_fields_code = array();
  foreach ($form_state['values']['node_fields_code'] as $fieldset) {
    foreach ($fieldset as $field_name => $field_value) {
      $node_fields_code[$field_name] = $field_value;
    }
  }
  $node_fields_code = array_diff($node_fields_code, array(''));
  $form_state['values']['node_fields_code'] = $node_fields_code;
  
  if ($clicked_button == 'Сохранить задание' || $clicked_button == 'Сохранить задание и Начать парсинг') {
    $job = entity_ui_form_submit_build_entity($form, $form_state);
    $job->save();
  }
  
  if ($clicked_button == 'Сохранить задание') {
    drupal_set_message('Задание сохранено.');
    $form_state['redirect'] = 'admin/structure/parser_jobs/manage/' . $job->id;
  }
  
  if ($clicked_button == 'Начать парсинг' || $clicked_button == 'Сохранить задание и Начать парсинг') {
    // Clear vocabularies
    foreach ($fields as $field_name => $field) {
      if (
        isset($field['bundles']['node']) &&
        in_array($values['node_type'], $field['bundles']['node']) &&
        $field['type'] == 'taxonomy_term_reference' &&
        $node_fields_code[$field_name . '_clear_voc']
      ) {
        _parser_clear_vocabulary($field['settings']['allowed_values'][0]['vocabulary']);
      }
    }
    
    _parser_url_delete_all();
    _parser_url_add($values['start_url']);
  
    $batch = array(
      'title' => 'Парсинг',
      'progress_message' => '',
      'operations' => array(
        array('parser_parse', array(
          $values['only_this_domen'],
          $values['depth'],
          $values['node_limit'],
          trim($values['white_list']),
          trim($values['black_list']),
          trim($values['check_code']),
          $values['site_charset'],
          $values['node_type'],
          $values['node_language'],
          $values['save_url'],
          $values['no_update_nodes'],
          trim($values['node_title_code']),
          $node_fields_code,
          trim($values['node_prepare_code']),
        )),
      ),
      'finished' => 'parser_finished',
    );

    batch_set($batch);
    cache_set('parser_job_info', array(
      'job_id' => $form_state['parser_job']->id,
      'start' => time(),
    ));
  }
}

/**
 * Parse page
 */
function parser_parse($only_this_domen, $depth, $node_limit, $white_list, $black_list, $check_code, $site_charset, $node_type, $node_language, $save_url, $no_update_nodes, $node_title_code, $node_fields_code, $node_prepare_code, &$context) {
  if (empty($context['sandbox'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['num_created_node'] = 0;
  }
  
  // Parsing -----------------------------------------------------------------------------------------------------------
  $url = _parser_url_get_not_parsed();
  $page_url = $url->url;
  $parsed_url = parse_url($page_url);
  $nid = _parser_get_nid_by_url($page_url);
  $page = _parser_get_page_by_url($page_url, $site_charset);
  $doc = _parser_create_phpquery($page);
  
  // Find links
  if ($url->depth < $depth) {
    foreach ($doc->find('a') as $a) {
      $href = pq($a)->attr('href');
      $href = _parser_get_full_url($href, $page_url);
      
      $allowed = TRUE;
      if ($white_list) {
        $allowed = drupal_match_path($href, $white_list) ? TRUE : FALSE;
      }
      if ($allowed && $black_list) {
        $allowed = drupal_match_path($href, $black_list) ? FALSE : TRUE;
      }
      if ($allowed && $only_this_domen) {
        $parsed_href = parse_url($href);
        $allowed = ($parsed_url['host'] == $parsed_href['host']);
      }
      if ($allowed) {
        _parser_url_add($href, $url->depth + 1);
      }
    }
  }
  
  $allowed_parse = TRUE;
  if (!$page) {
    $allowed_parse = FALSE;
  }
  if ($allowed_parse && $node_limit && $context['sandbox']['num_created_node'] >= $node_limit) {
    $allowed_parse = FALSE;
  }
  if ($allowed_parse && $check_code) {
    $allowed_parse = eval($check_code);
  }
  if ($allowed_parse && $no_update_nodes && $nid) {
    $allowed_parse = FALSE;
  }
  
  // Parse page
  if ($allowed_parse) {
    $fields = field_info_fields();
    $instances = field_info_instances();
    
    if ($nid) {
      $node = node_load($nid);
    }
    else {
      $node = new stdClass();
      $node->type = $node_type;
      $node->language = $node_language;
    }
    
    $node->title = eval($node_title_code);
    $node->title = trim($node->title);
    if (!$node->title) {
      $node->title = 'No Title';
    }
    
    foreach ($node_fields_code as $field_name => $php_code) {
      if (isset($fields[$field_name])) {
        $result = eval($php_code);
        $function = '_parser_add_field_' . $fields[$field_name]['type'];
        if (!function_exists($function)) {
          $function = '_parser_add_field';
        }
        $function($node, $field_name, $result, $fields, $instances, $node_fields_code, $page_url);
      }
    }
    
    // Set Path alias
    if ($save_url && !isset($node->path)) {
      $node->path = array(
        'alias' => trim($parsed_url['path'], '/'),
        'language' => $node->language,
      );
    }
    
    node_object_prepare($node);
    if ($node_prepare_code) {
      eval($node_prepare_code);
    }
    node_save($node);
    
    if (!$nid) {
      _parser_node_add($node->nid, $page_url);
    }
    
    $context['sandbox']['num_created_node']++;
    $context['results'][] = $node->title;
  }
  
  _parser_url_mark_parsed($page_url);
  // -------------------------------------------------------------------------------------------------------------------

  $context['sandbox']['max'] = _parser_url_count();
  $context['sandbox']['progress']++;
  $context['message'] = 'Завершён парсинг страницы <em>' . $page_url . '</em>';

  if ($node_limit && $context['sandbox']['num_created_node'] >= $node_limit) {
    $context['finished'] = 1;
  }
  elseif ($context['sandbox']['progress'] <= $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Site is parsed
 */
function parser_finished($success, $results, $operations) {
  if ($success) {
    $cache = cache_get('parser_job_info');
    drupal_set_message('
        Парсинг закончен.
        Обработано страниц: ' . _parser_url_count(TRUE) . '.
        Создано/обновлено нод: ' . l(count($results), 'admin/structure/parser_jobs/results/' . $cache->data['job_id']) . '.
        Затрачено времени: ' . gmdate('H:i:s', time() - $cache->data['start']) . '.
        ' . l('Посмотреть системный журнал', 'admin/reports/dblog') . '.
    ');
  }
  else {
    drupal_set_message('Парсинг закончился с ошибками.');
  }
}

/**
 * Implements of hook_node_delete().
 * Delete record from parser_nodes table
 */
function parser_node_delete($node) {
  db_delete('parser_nodes')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements of hook_node_view().
 * Show link to original page. Only admin.
 */
function parser_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full' && $GLOBALS['user']->uid == 1 && ($url = _parser_get_url_by_nid($node->nid))) {
    $node->content['parser_url'] = array(
      '#markup' => '<p>Материал спарсен со страницы ' . l($url, 'http://anonym.to/?' . $url, array('attributes' => array('target' => '_blank'))) . '</p>', 
      '#weight' => 10, 
    );
  }
}

/**
 * Check php code
 */
function parser_check_code() {
  $params = array('test_url', 'site_charset', 'field_name', 'field_value');
  foreach ($params as $param) {
    if (empty($_POST[$param])) {
      echo 'bad params';
      return NULL;
    }
  }
  
  $page = _parser_get_page_by_url($_POST['test_url'], $_POST['site_charset']);
  $page_url = $_POST['test_url'];
  $doc = _parser_create_phpquery($page);
  $result = eval($_POST['field_value']);
  
  echo print_r($result, true);
}

/**
 * Result page
 */
function parser_result_page($job) {
  $query = db_select('parser_nodes', 'pn');
  $query->fields('pn', array('nid', 'url'));
  $query->fields('n', array('title'));
  $query->leftJoin('node', 'n', 'pn.nid = n.nid');
  $result = $query->execute();
  
  $rows = array();
  foreach ($result as $row) {
    $rows[] = array(
      l($row->url, $row->url),
      l($row->title, 'node/' . $row->nid),
    );
  }
    
  return theme('table', array(
    'header' => array('URL', t('Title')),
    'rows' => $rows,
    'empty' => 'Пусто...',
  ));
}

/**
 * Implements of hook_form_FORM_ID_alter()
 */
function parser_form_parser_job_overview_form_alter(&$form, $form_state) {
  $form['table']['#header'][2]['colspan'] = 5;
  
  foreach ($form['table']['#rows'] as &$row) {
    $row[] = l(t('results'), 'admin/structure/parser_jobs/results/' . $row[0]['data']['#name']);
  }
}

/**
 * Implements of hook_library().
 */
function parser_library() {
  $parser_path = drupal_get_path('module', 'parser');
    
  $libraries['codemirror'] = array(
    'title' => 'CodeMirror',
    'website' => 'http://codemirror.net/',
    'version' => '2.13',
    'js' => array(
      $parser_path . '/codemirror2/lib/codemirror.js' => array(),
      $parser_path . '/codemirror2/mode/clike/clike.js' => array(),
      $parser_path . '/codemirror2/mode/php/php.js' => array(),
    ),
    'css' => array(
      $parser_path . '/codemirror2/lib/codemirror.css' => array(),
      $parser_path . '/codemirror2/theme/default.css' => array(),
    ),
  );

  return $libraries;
}

/**
 * Get URL info
 */
function _parser_url_get($url) {
  return db_select('parser_urls', 'pu')
    ->fields('pu')
    ->condition('url', $url)
    ->execute()
    ->fetchObject();
}

/**
 * Get first not parsed URL info
 */
function _parser_url_get_not_parsed() {
  return db_select('parser_urls', 'pu')
    ->fields('pu')
    ->condition('parsed', 0)
    ->range(0, 1)
    ->execute()
    ->fetchObject();
}

/**
 * Adding URL to database
 */
function _parser_url_add($url, $depth = 0) {
  if (!_parser_url_get($url)) {
    db_insert('parser_urls')
      ->fields(array('url' => $url, 'depth' => $depth))
      ->execute();
  }
}

/**
 * Mark URL as parsed
 */
function _parser_url_mark_parsed($url) {
  db_update('parser_urls')
    ->fields(array('parsed' => 1))
    ->condition('url', $url)
    ->execute();
}

/**
 * Delete all URLs from database
 */
function _parser_url_delete_all() {
  db_truncate('parser_urls')->execute();
}

/**
 * Get count not parsed URLs
 */
function _parser_url_count($parsed = null) {
  $query = db_select('parser_urls', 'pu');
  if (!is_null($parsed)) {
    $query->condition('pu.parsed', $parsed);
  }
  return $query->countQuery()->execute()->fetchField();
}

/**
 * Return page html by URL
 */
function _parser_get_page_by_url($url, $charset = 'auto', $skip_cache = FALSE) {
  $cid = 'parser:' . $url . ':' . $charset;
  $cached_data = cache_get($cid);
  if (!$cached_data || $skip_cache) {
    $result = drupal_http_request($url, array('headers' => array('User-Agent' => 'Opera/9.80 (Windows NT 6.1; U; ru) Presto/2.8.131 Version/11.10')));
    $page = isset($result->data) ? trim($result->data) : '';
    if ($page) {
      if ($charset == 'auto') {
        if (preg_match('#<meta http-equiv="Content-Type" content="text/html; charset=([^"])"+#iU', $page, $matches) && strtolower($matches[1]) != 'utf-8') {
          $page = iconv($matches[1], 'UTF-8', $page);
          $page = str_ireplace('<meta http-equiv="Content-Type" content="text/html; charset=' . $matches[1] . '"', '<meta http-equiv="Content-Type" content="text/html; charset=utf-8"', $page);
        }
      }
      else if ($charset != 'UTF-8') {
        $page = iconv($charset, 'UTF-8', $page);
      }
      cache_set($cid, $page);
    }
    else {
      watchdog('parser', 'Не удалось скачать страницу ' . $url . (isset($result->error) ? '. Ошибка: ' . $result->error : ''), array(), WATCHDOG_ALERT);
    }
  }
  else {
    $page = $cached_data->data;
  }
  return $page;
}

/**
 * Attach field to node object
 */
function _parser_add_field(&$node, $field_name, $field_value, $fields, $instances, $node_fields_code, $page_url) {
  $node->{$field_name}[LANGUAGE_NONE] = $field_value;
}

/**
 * Attach field type "text" to node object
 */
function _parser_add_field_text(&$node, $field_name, $field_values, $fields, $instances, $node_fields_code, $page_url) {
  if (!is_array($field_values)) {
    $field_values = array($field_values);
  }
  if (isset($node->{$field_name})) {
    unset($node->{$field_name});
  }
  
  $i = 0;
  foreach ($field_values as $field_value) {
    $node->{$field_name}[LANGUAGE_NONE][$i]['value'] = $field_value;
  
    if ($instances['node'][$node->type][$field_name]['settings']['text_processing']) {
      $node->{$field_name}[LANGUAGE_NONE][$i]['format'] = $node_fields_code[$field_name . '_format'];
    }
    
    $i++;
  }
}

/**
 * Attach field type "text_with_summary" to node object
 */
function _parser_add_field_text_with_summary(&$node, $field_name, $field_values, $fields, $instances, $node_fields_code, $page_url) {
  _parser_add_field_text($node, $field_name, $field_values, $fields, $instances, $node_fields_code, $page_url);
}

/**
 * Attach field type "file" to node object
 */
function _parser_add_field_file(&$node, $field_name, $field_values, $fields, $instances, $node_fields_code, $page_url) {
  if (!$field_values) {
    return FALSE;
  }
  if (!is_array($field_values)) {
    $field_values = array($field_values);
  }

  $files = array();
  $field_settings = $instances['node'][$node->type][$field_name]['settings'];
  $dest_dir = 'public://' . $field_settings['file_directory'];
  file_prepare_directory($dest_dir, FILE_CREATE_DIRECTORY);

  foreach ($field_values as $field_value) {
    if (!$field_value) {
      continue;
    }
      
    $file_name = basename($field_value);
    if (function_exists('transliteration_clean_filename')) {
      $file_name = transliteration_clean_filename($file_name, $node->language);
    }
    if (drupal_strlen(pathinfo($file_name, PATHINFO_FILENAME)) > 64) {
      $file_name = drupal_substr($file_name, 0, 64) . '.' . pathinfo($file_name, PATHINFO_EXTENSION);
    }
    
    // If file already attached, then break current iteration
    if (isset($node->{$field_name}[LANGUAGE_NONE])) {
      $cur_file_already_attached = FALSE;
      foreach ($node->{$field_name}[LANGUAGE_NONE] as $old_file) {
        if ($old_file['filename'] == $file_name) {
          $files[] = $old_file;
          $cur_file_already_attached = TRUE;
          break;
        }
      }
      if ($cur_file_already_attached) {
        continue;
      }
    }
    
    // Validate by extensions
    $allowed_file_extensions = str_replace(' ', '|', $field_settings['file_extensions']);
    if (!preg_match('#\.(' . $allowed_file_extensions . ')$#i', $file_name)) {
      watchdog('parser', 'Файл ' . check_plain($field_value) . ' закачан не будет, так как его тип не в списке допустимых.');
      continue;
    }
    
    // Save remote file to server
    $file_url = _parser_get_full_url($field_value, $page_url);
    $result = drupal_http_request($file_url);

    if (!empty($result->error)) {
      watchdog('parser', 'Ошибка при закачке файла. <b>Адрес</b>: ' . check_plain($file_url) . ', <b>Ошибка</b>: ' . $result->error . ', <b>Результат</b>: ' . check_plain($result->data));
      continue;
    }
    if (!$result->data) {
      watchdog('parser', 'Ошибка при закачке файла. <b>Адрес</b>: ' . check_plain($file_url) . ', <b>Ошибка</b>: сервер не возвратил данных.');
      continue;
    }
  
    $filepath = $dest_dir . ($dest_dir != 'public://' ? '/' : '') . $file_name;
    $file = file_save_data($result->data, $filepath);
    if ($file) {
      $files[] = (array)$file + array('display' => 1);
    }
  }
  
  if (isset($node->{$field_name})) {
    unset($node->{$field_name});
  }
  
  $node->{$field_name}[LANGUAGE_NONE] = $files;
}

/**
 * Attach field type "image" to node object
 */
function _parser_add_field_image(&$node, $field_name, $field_values, $fields, $instances, $node_fields_code, $page_url) {
  _parser_add_field_file($node, $field_name, $field_values, $fields, $instances, $node_fields_code, $page_url);
}

/**
 * Attach field type "taxonomy_term_reference" to node object
 */
function _parser_add_field_taxonomy_term_reference(&$node, $field_name, $field_values, $fields, $instances, $node_fields_code, $page_url) {
  if (!is_array($field_values)) {
    $field_values = array($field_values);
  }
  if (isset($node->{$field_name})) {
    unset($node->{$field_name});
  }
  
  $voc_machine_name = $fields[$field_name]['settings']['allowed_values'][0]['vocabulary'];
  $voc = taxonomy_vocabulary_machine_name_load($voc_machine_name);

  foreach ($field_values as $term_name) {
    $term_name = trim($term_name);
    $term = current(taxonomy_term_load_multiple(array(), array('name' => $term_name, 'vid' => $voc->vid)));
    if (!$term) {
      $term = (object)array('vid' => $voc->vid, 'name' => $term_name);
      taxonomy_term_save($term);
    }
    $node->{$field_name}[LANGUAGE_NONE][]['tid'] = $term->tid;
  }
}

/**
 * Attach field type "number_integer" to node object
 */
function _parser_add_field_number_integer(&$node, $field_name, $field_values, $fields, $instances, $node_fields_code, $page_url) {
  if (!is_array($field_values)) {
    $field_values = array($field_values);
  }
  if (isset($node->{$field_name})) {
    unset($node->{$field_name});
  }
  foreach ($field_values as $field_value) {
    $node->{$field_name}[LANGUAGE_NONE][]['value'] = (int)$field_value;
  }
}

/**
 * Add relations node to url
 */
function _parser_node_add($nid, $url) {
  db_insert('parser_nodes')->fields(array('nid' => $nid, 'url' => $url))->execute();
}

/**
 * Return nid by URL
 */
function _parser_get_nid_by_url($url) {
  return db_select('parser_nodes', 'pn')
    ->fields('pn', array('nid'))
    ->condition('url', $url)
    ->execute()
    ->fetchField();
}

/**
 * Return nid by URL
 */
function _parser_get_url_by_nid($nid) {
  return db_select('parser_nodes', 'pn')
    ->fields('pn', array('url'))
    ->condition('nid', $nid)
    ->execute()
    ->fetchField();
}

/**
 * Return row count
 */
function _parser_get_rows($text) {
  $count = substr_count(trim($text), "\n") + 1;
  return $count > 3 ? $count : 3;
}

/**
 * Set row count
 */
function _parser_set_rows(&$form) {
  foreach (element_children($form) as $element) {
    if (isset($form[$element]['#type']) && $form[$element]['#type'] == 'textarea') {
      $form[$element]['#rows'] = _parser_get_rows($form[$element]['#default_value']);
    }
    else {
      _parser_set_rows($form[$element]);
    }
  }
}

/**
 * Return full url
 */
function _parser_get_full_url($url, $page_url) {
  $url = trim($url);
  $url = preg_replace('/#.+/', '', $url);
  $page_url_parsed = parse_url($page_url);

  if (substr($url, 0, 1) == '/') {
    $url = $page_url_parsed['scheme'] . '://' . $page_url_parsed['host'] . $url;
  }
  elseif (strpos($url, 'http') !== 0) {
    $page_url = rtrim($page_url, '/');
    $page_url = preg_replace('#/[^/]+$#', '', $page_url);
    $url = $page_url . '/' . $url;
  }
  
  $url = str_replace(' ', '+', $url);
  $url = current(explode('#', $url));
  
  return $url;
}

/**
 * Download file to local storage
 */
function _parser_download_file_use_curl($file_url, $destination) {
  $ch = curl_init($file_url);
  $fp = fopen(drupal_realpath($destination), 'wb');
  curl_setopt($ch, CURLOPT_FILE, $fp);
  curl_setopt($ch, CURLOPT_HEADER, 0);
  curl_exec($ch);
  $error = curl_error($ch);
  curl_close($ch);
  fclose($fp);
  
  return $error;
}

/**
 * Clear vocabulary
 */
function _parser_clear_vocabulary($vocabulary_name) {
  $vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_name);
  $terms = taxonomy_get_tree($vocabulary->vid);

  foreach ($terms as $term) {
    taxonomy_term_delete($term->tid);
  }
}

/**
 * Create phpQuery object
 */
function _parser_create_phpquery($html) {
  require_once('phpQuery/phpQuery/phpQuery.php');
  return phpQuery::newDocumentHTML($html);
}
