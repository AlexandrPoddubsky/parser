<?php

/**
 * Implementation of hook_schema().
 */
function parser_schema() {
  $schema['parser_jobs'] = array(
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'start_url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'only_this_domen' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'test_url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'depth' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'parse_limit' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'white_list' => array(
        'type' => 'text',
        'not null' => TRUE,
      ),
      'black_list' => array(
        'type' => 'text',
        'not null' => TRUE,
      ),
      'check_code' => array(
        'type' => 'text',
        'not null' => TRUE,
      ),
      'save_url' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'no_update' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'site_charset' => array(
        'type' => 'varchar',
        'length' => 20,
        'not null' => TRUE,
        'default' => 'auto',
      ),
      'charset_fix' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'bundle' => array(
        'type' => 'varchar',
        'length' => 20,
        'not null' => TRUE,
        'default' => '',
      ),
      'label_code' => array(
        'type' => 'text',
        'not null' => TRUE,
      ),
      'fields_code' => array(
        'type' => 'text',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
      'prepare_code' => array(
        'type' => 'text',
        'not null' => TRUE,
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'The name of the providing module if the entity has been defined in code.',
      ),
    ),
    'primary key' => array('id'),
  );
  
  $schema['parser_urls'] = array(
    'fields' => array(
      'url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'depth' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'parsed' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
  );
  
  $schema['parser_nodes'] = array(
    'fields' => array(
      'jid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'url' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'page_key' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('jid', 'nid'), 
    'foreign keys' => array(
      'node' => array(
        'table' => 'node',
        'columns' => array('nid' => 'nid'),
      ),
    ),
  );
  return $schema;
}

/**
 * Implementation of hook_install().
 */
function parser_install() {
  $job = array(
    'title' => 'Парсинг шаблонов с drupal.org',
    'start_url' => 'http://drupal.org/project/themes',
    'test_url' => 'http://drupal.org/project/zen',
    'depth' => 1,
    'parse_limit' => 5,
    'white_list' => 'http://drupal.org/project/*',
    'black_list' => '' . 
      'http://drupal.org/project/issues/*' . "\n" .
      'http://drupal.org/project/themes?solrsort*' . "\n" .
      'http://drupal.org/project/themes?filters*' . "\n" .
      'http://drupal.org/project/modules*',
    'check_code' => '' .
      'if ($doc->find(\'a[href="/project/themes"].active\')->length() && $doc->find(\'.view-project-release-download-table\')->length()) {' . "\n" .
      '  return TRUE;' . "\n" .
      '}',
    'site_charset' => 'auto',
    'charset_fix' => 0,
    'bundle' => 'article',
    'save_url' => 0,
    'no_update' => 0,
    'label_code' => 'return $doc->find(\'h1#page-subtitle\')->text();',
    'fields_code' => array(
      'body' => '' .
        '$content = $doc->find(\'.node-content\')->clone();' . "\n" .
        '$content->find(\'.all-attached-images\')->remove();' . "\n" .
        'return $content->html();',
      'body_format' => 'full_html',
      'field_tags' => '' .
        '$terms = array();' . "\n" .
        'foreach ($doc->find(\'.project-info a[href^="/taxonomy/term/"]\') as $a) {' . "\n" .
        '  $terms[] = pq($a)->text();' . "\n" .
        '}' . "\n" .
        'return $terms;',
      'field_image' => 'return $doc->find(\'.image-thumbnail\')->attr(\'src\');',
    ),
    'prepare_code' => '',
  );
  entity_save('parser_job', $job);
  
  foreach (array('public://parser_cache/html', 'public://parser_cache/files') as $directory) {
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
  }
}

/**
 * Implementation of hook_uninstall().
 */
function parser_uninstall() {
  file_unmanaged_delete_recursive('public://parser_cache');
}

